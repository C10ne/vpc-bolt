// Element system types for basic HTML building blocks

// ElementType remains largely the same, but we might want to ensure it aligns with shared/schema.ts ElementType
// For now, keeping existing types and adding 'unknown' as suggested.
export type ElementType = 
  | 'heading'
  | 'paragraph' 
  | 'image'
  | 'button'
  | 'form-field' // This is a custom type, may need mapping to schema's Text/Input or new types
  | 'text-group' // This is a custom type, similar to 'Group' in schema
  | 'unknown';   // Fallback type

// The single, unified Element interface aligning with ElementData from @shared/schema
// All specific data, content, style hints, and configurations go into 'properties'.
export interface Element {
  id: string; // String for UUIDs generated by the registry
  type: ElementType;
  properties: Record<string, any>; // All data, config, style goes here
}

// ElementDefinition for registering element types in the ElementRegistry
export interface ElementDefinition {
  type: ElementType;
  displayName: string;
  // defaultProperties will contain all default values for an element of this type,
  // including what was previously in defaultContent, default styles, or specific properties.
  defaultProperties: Record<string, any>;
  // editableProperties lists keys from the 'properties' object that are considered editable by an inspector.
  editableProperties: string[];
  quickControlActions?: string[]; // e.g., ['bold', 'italic', 'link'] for text elements
}

// Example: How a 'Heading' element's data would now look inside Element.properties:
// properties: {
//   text: 'My Heading',
//   level: 'h1', // 'h1', 'h2', etc.
//   textAlign: 'left', // Previously from ElementStyle
//   textColor: '#333333'  // Previously from ElementStyle
// }

// Example: How an 'Image' element's data would now look inside Element.properties:
// properties: {
//   src: 'https://example.com/image.png',
//   alt: 'Descriptive text',
//   caption: 'Optional caption',
//   width: '100%', // Previously specific ImageElement.properties
//   height: 'auto', // Previously specific ImageElement.properties
//   objectFit: 'cover', // Previously specific ImageElement.properties
//   padding: '10px' // Previously from ElementStyle
// }

// Note: The specific interfaces like HeadingElement, ParagraphElement, ImageElement, etc.,
// and BaseElement, ElementStyle are removed as their fields are consolidated into
// the generic Element's 'properties' object.

// ElementEditingState can be kept if it's used by UI components that manage element editing.
// However, its structure might need to adapt if selectedElement refers to the new Element type.
export interface ElementEditingState {
  selectedElementId: string | null; // Changed from selectedElement to selectedElementId for clarity
  editingMode: 'content' | 'style' | 'properties';
  hasUnsavedChanges: boolean;
}